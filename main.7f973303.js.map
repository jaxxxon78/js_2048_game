{"version":3,"sources":["scripts/main.js"],"names":["field","table","document","querySelector","startButton","scoreGame","messageWin","messageLose","messageStart","rows","cols","score","setRandomNumber","twoOrFour","Math","random","found","rowInd","floor","colInd","hasEmptyCells","updateGame","startGame","innerText","classList","replace","add","r","c","currentTile","cells","valueOfTile","value","className","remove","canPlay","filterZero","row","filter","el","slide","newRow","map","ind","arr","length","push","slideLeft","forEach","slideRight","reverse","slideUp","slideDown","equal","e","i","array","res1","res2","a","res3","isEqualInRow","addEventListener","contains","code"],"mappings":"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","file":"main.7f973303.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('tbody');\nconst startButton = document.querySelector('.start');\nconst scoreGame = document.querySelector('.game-score');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\n\nconst rows = 4;\nconst cols = 4;\nlet field;\n\nlet score = 0;\n\nstartButton.addEventListener('click', startGame);\n\nfunction setRandomNumber() {\n  const twoOrFour = Math.random() < 0.2 ? 4 : 2;\n\n  let found = false;\n\n  while (!found) {\n    const rowInd = Math.floor(Math.random() * 4);\n    const colInd = Math.floor(Math.random() * 4);\n\n    if (!hasEmptyCells(field)) {\n      break;\n    }\n\n    if (field[rowInd][colInd] === 0) {\n      field[rowInd][colInd] = twoOrFour;\n      found = true;\n    }\n  }\n  updateGame();\n};\n\nfunction startGame() {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n\n  startButton.innerText = 'Restart';\n  startButton.classList.replace('start', 'restart');\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  setRandomNumber();\n  setRandomNumber();\n};\n\ndocument.addEventListener('keyup', e => {\n  if (startButton.classList.contains('start')) {\n    return;\n  }\n\n  switch (e.code) {\n    case 'ArrowLeft': slideLeft(); break;\n    case 'ArrowRight': slideRight(); break;\n    case 'ArrowUp': slideUp(); break;\n    case 'ArrowDown': slideDown(); break;\n    default: break;\n  }\n  setRandomNumber();\n  setRandomNumber();\n\n  updateGame();\n});\n\nfunction updateGame() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      const currentTile = table.rows[r].cells[c];\n      const valueOfTile = field[r][c];\n\n      currentTile.innerText = '';\n      currentTile.classList.value = '';\n      currentTile.className = `field-cell`;\n\n      if (valueOfTile > 0) {\n        currentTile.innerText = valueOfTile;\n        currentTile.classList.add(`field-cell--${valueOfTile}`);\n      }\n\n      if (valueOfTile === 2048) {\n        messageWin.classList.remove('hidden');\n        startButton.classList.replace('restart', 'start');\n        startButton.innerText = 'Start';\n      }\n    }\n  }\n  scoreGame.innerText = score;\n\n  if (!canPlay(field)) {\n    messageLose.classList.remove('hidden');\n    startButton.innerText = 'Start';\n  }\n};\n\nfunction filterZero(row) {\n  return row.filter(el => el !== 0);\n}\n\nfunction slide(row) {\n  let newRow = filterZero(row);\n\n  newRow.map((el, ind, arr) => {\n    if (arr[ind] === arr[ind + 1]) {\n      arr[ind] *= 2;\n      arr[ind + 1] = 0;\n      score += arr[ind];\n    }\n  });\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < rows) {\n    newRow.push(0);\n  }\n\n  return newRow;\n};\n\nfunction slideLeft() {\n  field.forEach((row, ind) => {\n    field[ind] = slide(row);\n\n    return field[ind];\n  });\n};\n\nfunction slideRight() {\n  field.forEach((row, ind) => {\n    field[ind] = slide(row.reverse());\n\n    return field[ind].reverse();\n  });\n}\n\nfunction slideUp() {\n  field.forEach((row, ind) => {\n    const newRow = slide(\n      [field[0][ind], field[1][ind], field[2][ind], field[3][ind]]);\n\n    field[0][ind] = newRow[0];\n    field[1][ind] = newRow[1];\n    field[2][ind] = newRow[2];\n    field[3][ind] = newRow[3];\n  });\n}\n\nfunction slideDown() {\n  field.forEach((row, ind) => {\n    let newRow = [field[3][ind], field[2][ind], field[1][ind], field[0][ind]];\n\n    newRow = slide(newRow).reverse();\n    field[0][ind] = newRow[0];\n    field[1][ind] = newRow[1];\n    field[2][ind] = newRow[2];\n    field[3][ind] = newRow[3];\n  });\n}\n\nfunction hasEmptyCells(arr) {\n  let equal = false;\n\n  arr.forEach((e, i) => {\n    e.forEach(el => {\n      if (el === 0) {\n        equal = true;\n      }\n    });\n  });\n\n  return equal;\n}\n\nfunction canPlay(array) {\n  function isEqualInColumns(arr) {\n    let equal = false;\n\n    arr.forEach((e, i, a) => {\n      e.forEach((el, ind) => {\n        if (i < 3 && a[i][ind] === a[i + 1][ind]) {\n          equal = true;\n        }\n      });\n    });\n\n    return equal;\n  }\n\n  function isEqualInRow(arr) {\n    let equal = false;\n\n    arr.forEach((e, i, a) => {\n      e.forEach((el, ind) => {\n        if (ind < 3 && a[i][ind] === a[i][ind + 1]) {\n          equal = true;\n        }\n      });\n    });\n\n    return equal;\n  }\n\n  const res1 = hasEmptyCells(array);\n  const res2 = isEqualInColumns(array);\n  const res3 = isEqualInRow(array);\n\n  return (res1 || res2 || res3);\n}\n"]}